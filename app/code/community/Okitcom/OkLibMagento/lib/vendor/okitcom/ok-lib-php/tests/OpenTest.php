<?php
/**
 * Created by PhpStorm.
 * Date: 7/21/17
 */

namespace OK\Tests;

use OK\Builder\AttributeBuilder;
use OK\Builder\AuthorisationRequestBuilder;
use OK\Builder\LocationBuilder;
use OK\Client;
use OK\Model\Attribute;
use OK\Model\Attributes;
use OK\Model\Location;
use OK\Model\Network\Exception\NetworkException;
use OK\Model\Cash\TransactionRequest;
use OK\Model\Open\AuthorisationRequest;
use OK\Service\Cash;
use OK\Service\Open;

class OpenTest extends ServiceTest
{

    /** @var  Open */
    protected $service;

    public function setUp() {
        parent::setUp();

        $this->service = new Open($this->openCredentials);
    }

    public function testInitiate() {
        $request = (new AuthorisationRequestBuilder())
            ->setAction("Login")
            ->setReference("reference")
            ->setPermissions("NewPendingTrigger")
            ->setLocation(
                (new LocationBuilder())
                ->setLat(1.2345)
                ->setLon(5.1231)
                ->build()
            )
            ->build();
        $response = $this->service->request($request);
        $this->assertEquals("NewPendingTrigger", $response->state);
    }

    public function testInitiateAttributesOne() {
        $request = (new AuthorisationRequestBuilder())
            ->setAction("Login")
            ->setReference("reference")
            ->setPermissions("NewPendingTrigger")
            ->setLocation(
                (new LocationBuilder())
                    ->setLat(1.2345)
                    ->setLon(5.1231)
                    ->build()
            )
            ->addAttribute(
                (new AttributeBuilder())
                ->setType(Attribute::TYPE_NAME)
                ->setKey("name")
                ->setLabel("Name")
                ->setRequired(true)
                ->build()
            )
            ->build();

        $response = $this->service->request($request);
        $this->assertEquals("NewPendingTrigger", $response->state);
        $this->assertEquals("name", $response->attributes->name->key);
    }
    public function testInitiateAttributesTwo() {
        $request = (new AuthorisationRequestBuilder())
            ->setAction("Login")
            ->setReference("reference")
            ->setPermissions("NewPendingTrigger")
            ->setLocation(
                (new LocationBuilder())
                    ->setLat(1.2345)
                    ->setLon(5.1231)
                    ->build()
            )
            ->addAttribute(
                (new AttributeBuilder())
                    ->setType(Attribute::TYPE_NAME)
                    ->setKey("name")
                    ->setLabel("Name")
                    ->setRequired(true)
                    ->build()
            )
            ->addAttribute(
                (new AttributeBuilder())
                    ->setType(Attribute::TYPE_PHONENUMBER)
                    ->setKey("phone")
                    ->setLabel("Phone")
                    ->setRequired(true)
                    ->build()
            )
            ->build();

        $response = $this->service->request($request);
        $this->assertEquals("NewPendingTrigger", $response->state);
        $this->assertEquals("name", $response->attributes->name->key);
        $this->assertEquals("phone", $response->attributes->phone->key);
    }

    public function testQR() {
        $request = (new AuthorisationRequestBuilder())
            ->setAction("Login")
            ->setReference("reference")
            ->setPermissions("NewPendingTrigger")
            ->setLocation(
                (new LocationBuilder())
                    ->setLat(1.2345)
                    ->setLon(5.1231)
                    ->build()
            )
            ->build();
        $response = $this->service->request($request);

        $qr = $this->service->qr($response->guid);
        $this->assertNotNull($qr);
    }


}
